
//Clear
.clear() {
  *zoom: 1;

  &:before,
  &:after {
    content: "";
    display: table;
  }

  &:after {
    clear: both;
  }
}

//Font-size
.font-size(@sizeValue) {
  @remValue: @sizeValue;
  @pxValue: (@sizeValue * 10);
  font-size: ~"@{pxValue}px";
  font-size: ~"@{remValue}rem";
}

//Hide only visually, but have it available for screenreaders
.sr-only() {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

//Box-shadow
.box-shadow(@offsetx: 0, @offsety: 0, @blur: 0, @spread: 0, @color: #000) {
  -webkit-box-shadow: @offsetx @offsety @blur @spread @color;
  -moz-box-shadow: @offsetx @offsety @blur @spread @color;
  box-shadow: @offsetx @offsety @blur @spread @color;
}

//Gradients
.gradient-horizontal (@start-color: #ffffff, @end-color: #f5f5f5) {
  background-color: @end-color;
  background-repeat: repeat-x;
  background: -webkit-gradient(linear, left top, right top, from(@start-color), to(@end-color));
  background: -webkit-linear-gradient(left, @start-color, @end-color);
  background: -moz-linear-gradient(left, @start-color, @end-color);
  background: -ms-linear-gradient(left, @start-color, @end-color);
  background: -o-linear-gradient(left, @start-color, @end-color);
  background: linear-gradient(left, @start-color, @end-color);
}

.gradient-vertical (@start-color: #555, @end-color: #333) {
  background-color: @end-color;
  background-repeat: repeat-x;
  background: -webkit-gradient(linear, 0 0, 0 bottom, from(@start-color), to(@end-color));
  background: -webkit-linear-gradient(@start-color, @end-color);
  background: -moz-linear-gradient(@start-color, @end-color);
  background: -o-linear-gradient(@start-color, @end-color);
  background: linear-gradient(@start-color, @end-color);
  background: linear-gradient(left, @start-color, @end-color);
}

//Border Radius
.corners(@radius: 5px) {
  -webkit-border-radius: @radius;
  -moz-border-radius: @radius;
  border-radius: @radius;
}

.corners-top(@radius: 5px) {
  -webkit-border-radius: @radius @radius 0 0;
  -moz-border-radius: @radius @radius 0 0;
  border-radius: @radius @radius 0 0;
}

.corners-bottom(@radius: 5px) {
  -webkit-border-radius: 0 0 @radius @radius;
  -moz-border-radius: 0 0 @radius @radius;
  border-radius: 0 0 @radius @radius;
}

.corners-right(@radius: 5px) {
  -webkit-border-radius: 0 @radius @radius 0;
  -moz-border-radius: 0 @radius @radius 0;
  border-radius: 0 @radius @radius 0;
}

.corners-left(@radius: 5px) {
  -webkit-border-radius: @radius 0 0 @radius;
  -moz-border-radius: @radius 0 0 @radius;
  border-radius: @radius 0 0 @radius;
}

//Triangles
.triangle-up(@size, @color){
    border-left: @size solid transparent;
    border-right: @size solid transparent;
    border-bottom: @size solid @color;
}
.triangle-down(@size, @color){
    border-left: @size solid transparent;
    border-right: @size solid transparent;
    border-top: @size solid @color;
}
.triangle-left(@direction, @size, @color) {
    border-top: @size solid transparent;
    border-bottom: @size solid transparent;
    border-right: @size solid @color;
}
.triangle-right(@direction, @size, @color) {
    border-top: @size solid transparent;
    border-bottom: @size solid transparent;
    border-left: @size solid @color;
}


//Circle
.circle(@width: 50px, @height: 50px) {
  width: @width;
  height: @height;
  -moz-border-radius: 50%;
  -webkit-border-radius: 50%;
  border-radius: 50px;
}


// http://lesscss.org/features/#loops-feature
//Opacity countdown start
@base: 1;
.applyStyles('opacity',@i){
  opacity:calc(1-(@base*(@i/10)));
}

//Background
.applyStyles('bg',@color,@iteration,@interval,@startingPoint){
  background-color:rgba(red(@color), green(@color),blue(@color),(@startingPoint - (@iteration/@interval)));
}


//Class creation loop
.createClass (@index, @class: item,@mixin: '', @leap:1) when (@index > 0) { 
  .@{class}-@{index} {
		// call styles through mixin
		.applyStyles(@mixin, @index);
	} 
	// next iteration
	.createClass(@index - @leap, @class,@mixin, @leap);
}


//Child creation loop
.generate-children(@mixin: '',@color:#000000, @n, @start: 1,@interval:40, @startingPoint:1) when (@start =< @n) {
  
  &:nth-of-type(@{start}){
    .applyStyles(@mixin, @color, @start, @interval, @startingPoint);
  }
  .generate-children(@mixin,@color, @n, (@start + 1), @interval, @startingPoint);
}

.module-top(){ 
  padding-top:20px;
  border-top:1px solid @grey-350;

  h2 {
    padding: 0 20px;
    margin-bottom: 40px;
    margin-top:0;
  }
}